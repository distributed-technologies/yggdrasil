bucketClaim:
  # Enableing the bucket claim
  enabled: true
  # The name of the bucket claim
  name: tempo-bucket-claim
  # Annotations for the bucket claim
  annotations:
    # This annotations makes it so ArgoCD will not complain if the CRD's are missing
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  # Name of the bucket in which to make the claim
  bucketName: tempo-bucket
  # Name of the storageClass that contains the bucket provider
  storageClassName: ceph-bucket

# https://github.com/grafana/helm-charts/blob/main/charts/tempo-distributed/values.yaml
tempo-distributed:
  # Configuration for the ingester
  ingester:
    # Allows the use of environment variables in the config
    # https://grafana.com/docs/tempo/latest/configuration/
    extraArgs:
      - -config.expand-env=true
    # -- Environment variables to add to the ingester pods
    # Creating environment from the configmap and secrets generated by the ceph-object-bucket-claim
    extraEnv:
      - name: AWS_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: tempo-bucket-claim
            key: AWS_ACCESS_KEY_ID
      - name: AWS_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: tempo-bucket-claim
            key: AWS_SECRET_ACCESS_KEY
      - name: BUCKET_HOST
        valueFrom:
          configMapKeyRef:
            name: tempo-bucket-claim
            key: BUCKET_HOST
      - name: BUCKET_NAME
        valueFrom:
          configMapKeyRef:
            name: tempo-bucket-claim
            key: BUCKET_NAME
      - name: BUCKET_REGION
        valueFrom:
          configMapKeyRef:
            name: tempo-bucket-claim
            key: BUCKET_REGION

  distributor:
    # Allows the use of environment variables in the config
    # https://grafana.com/docs/tempo/latest/configuration/
    extraArgs:
      - -config.expand-env=true
    # -- Environment variables to add to the distributor pods
    # Creating environment from the configmap and secrets generated by the ceph-object-bucket-claim
    extraEnv:
      - name: AWS_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: tempo-bucket-claim
            key: AWS_ACCESS_KEY_ID
      - name: AWS_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: tempo-bucket-claim
            key: AWS_SECRET_ACCESS_KEY
      - name: BUCKET_HOST
        valueFrom:
          configMapKeyRef:
            name: tempo-bucket-claim
            key: BUCKET_HOST
      - name: BUCKET_NAME
        valueFrom:
          configMapKeyRef:
            name: tempo-bucket-claim
            key: BUCKET_NAME
      - name: BUCKET_REGION
        valueFrom:
          configMapKeyRef:
            name: tempo-bucket-claim
            key: BUCKET_REGION

  compactor:
    # Allows the use of environment variables in the config
    # https://grafana.com/docs/tempo/latest/configuration/
    extraArgs:
      - -config.expand-env=true
    # -- Environment variables to add to the compactor pods
    # Creating environment from the configmap and secrets generated by the ceph-object-bucket-claim
    extraEnv:
      - name: AWS_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: tempo-bucket-claim
            key: AWS_ACCESS_KEY_ID
      - name: AWS_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: tempo-bucket-claim
            key: AWS_SECRET_ACCESS_KEY
      - name: BUCKET_HOST
        valueFrom:
          configMapKeyRef:
            name: tempo-bucket-claim
            key: BUCKET_HOST
      - name: BUCKET_NAME
        valueFrom:
          configMapKeyRef:
            name: tempo-bucket-claim
            key: BUCKET_NAME
      - name: BUCKET_REGION
        valueFrom:
          configMapKeyRef:
            name: tempo-bucket-claim
            key: BUCKET_REGION

  # Configuration for the querier
  querier:
    # Allows the use of environment variables in the config
    # https://grafana.com/docs/tempo/latest/configuration/
    extraArgs:
      - -config.expand-env=true
    # -- Environment variables to add to the querier pods
    # Creating environment from the configmap and secrets generated by the ceph-object-bucket-claim
    extraEnv:
      - name: AWS_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: tempo-bucket-claim
            key: AWS_ACCESS_KEY_ID
      - name: AWS_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: tempo-bucket-claim
            key: AWS_SECRET_ACCESS_KEY
      - name: BUCKET_HOST
        valueFrom:
          configMapKeyRef:
            name: tempo-bucket-claim
            key: BUCKET_HOST
      - name: BUCKET_NAME
        valueFrom:
          configMapKeyRef:
            name: tempo-bucket-claim
            key: BUCKET_NAME
      - name: BUCKET_REGION
        valueFrom:
          configMapKeyRef:
            name: tempo-bucket-claim
            key: BUCKET_REGION

  # Configuration for the query-frontend
  queryFrontend:
    # Allows the use of environment variables in the config
    # https://grafana.com/docs/tempo/latest/configuration/
    extraArgs:
      - -config.expand-env=true
    # -- Environment variables to add to the query-frontend pods
    # Creating environment from the configmap and secrets generated by the ceph-object-bucket-claim
    extraEnv:
      - name: AWS_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: tempo-bucket-claim
            key: AWS_ACCESS_KEY_ID
      - name: AWS_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: tempo-bucket-claim
            key: AWS_SECRET_ACCESS_KEY
      - name: BUCKET_HOST
        valueFrom:
          configMapKeyRef:
            name: tempo-bucket-claim
            key: BUCKET_HOST
      - name: BUCKET_NAME
        valueFrom:
          configMapKeyRef:
            name: tempo-bucket-claim
            key: BUCKET_NAME
      - name: BUCKET_REGION
        valueFrom:
          configMapKeyRef:
            name: tempo-bucket-claim
            key: BUCKET_REGION

  # Set Tempo server configuration
  # Refers to https://grafana.com/docs/tempo/latest/configuration/#server
  server:
  # -- the supported storage backends are gcs, s3 and azure
  # -- as specified in https://grafana.com/docs/tempo/latest/configuration/#storage
  storage:
    trace:
      backend: s3
      s3:
        # Bucket name in s3
        # Tempo requires a dedicated bucket since it maintains a top-level object structure and does not support
        # a custom prefix to nest within a shared bucket.
        bucket: ${BUCKET_NAME}

        # api endpoint to connect to. use AWS S3 or any S3 compatible object storage endpoint.
        # Example: "endpoint: s3.dualstack.us-east-2.amazonaws.com"
        endpoint: ${BUCKET_HOST}

        # optional.
        # By default the region is inferred from the endpoint,
        # but is required for some S3-compatible storage engines.
        # Example: "region: us-east-2"
        region: ${BUCKET_REGION}

        # optional.
        # access key when using static credentials.
        access_key: ${AWS_ACCESS_KEY_ID}

        # optional.
        # secret key when using static credentials.
        secret_key: ${AWS_SECRET_ACCESS_KEY}

        # optional.
        # enable if endpoint is http
        insecure: true

  search:
    enabled: true

  # These are left in for convinience, since we're at this point not sure which form of traces we need to have a reciver enabled for.
  traces:
    jaeger:
      # -- Enable Tempo to ingest Jaeger GRPC traces
      grpc: true
      # -- Enable Tempo to ingest Jaeger Thrift Binary traces
      thriftBinary: true
      # -- Enable Tempo to ingest Jaeger Thrift Compact traces
      thriftCompact: true
      # -- Enable Tempo to ingest Jaeger Thrift HTTP traces
      thriftHttp: true
    # -- Enable Tempo to ingest Zipkin traces
    zipkin: false
    otlp:
      # -- Enable Tempo to ingest Open Telemetry HTTP traces
      http: false
      # -- Enable Tempo to ingest Open Telemetry GRPC traces
      grpc: false
    # -- Enable Tempo to ingest Open Census traces
    opencensus: false
    # -- Enable Tempo to ingest traces from Kafka. Reference: https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/kafkareceiver
    kafka: {}

    # ServiceMonitor configuration
  serviceMonitor:
    # -- If enabled, ServiceMonitor resources for Prometheus Operator are created
    enabled: true
    labels:
      instance: primary
